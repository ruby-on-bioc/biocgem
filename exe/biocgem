#!/usr/bin/env ruby

#require "biocgem"

require "optparse"
require "erb"
require "fileutils"
require "tmpdir"

Options = Struct.new(:bioc_package_name, :bioc_sqlite_database_name, :gem_icon, :gem_constant_name, :gem_require_name,
                     :bioc_package_sha256sum, :bioc_version, :bioc_package_version)

options = Options.new

sample_config = {
  bioc_package_name: "org.Hs.eg.db",
  bioc_sqlite_database_name: "org.Hs.eg.sqlite",
  gem_icon: "üßë‚Äçü§ù‚Äçüßë",
  gem_constant_name: "OrgHsEgDb",
  gem_require_name: "org_hs_eg_db",
  bioc_package_sha256sum: "d22c7e6b13f89488d10bafbf7eacdb6b7aaa697c131ed73f601a502ac86ecd56",
  bioc_version: "3.14",
  bioc_package_version: "3.14.0"
}

OptionParser.new do |parser|
  parser.banner = "Usage: biocgem [options]"

  sample_config.each do |key, value|
    parser.on("--#{key} VAL", "Set #{key} to VAL.", "#{value}") do |v|
      options[key] = v
    end
  end

end.parse!

config = options.to_h

target = config[:bioc_package_name]

base = File.expand_path("../template/newgem", __dir__)

Dir.mktmpdir do |tmpdir|
  Dir.glob("**/*", File::FNM_DOTMATCH, base: base) do |f|
    src = File.expand_path(f, base)
    next unless File.file?(src)

    p src

    str = File.read(src)
    erb = ERB.new(str)
    str = erb.result(binding)

    trg = File.expand_path(f, tmpdir)
    fname = File.basename(trg, ".tt")
    fname.gsub!("new_gem_entry", config[:gem_require_name])
    dirname = File.dirname(trg)
    FileUtils.mkdir_p(dirname)
    File.write(File.join(dirname, fname), str)
  end
  FileUtils.cp_r(tmpdir, target)
end
